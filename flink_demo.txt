SET 'table.local-time-zone' = 'UTC';

SET 'table.local-time-zone' = 'UTC';


SET sql-client.execution.result-mode=tableau;


CREATE TABLE TAXI_BOOKINGS (
  ride_id STRING,
  pickupDateTime BIGINT,
  pickupLocation STRING,
  dropOffLocation STRING,
  ts AS TO_TIMESTAMP_LTZ(pickupDateTime,3),
  WATERMARK FOR ts AS ts - INTERVAL '5' SECOND  -- defines watermark on ts column, marks ts as event-time attribute
) WITH (
  'connector' = 'kafka',
  'topic' = 'taxi_ride',
  'properties.bootstrap.servers' = 'broker:9092',
  'properties.group.id' = 'group.taxi.ride',
  'format' = 'json',
  'scan.startup.mode' = 'earliest-offset',
  'json.fail-on-missing-field' = 'true',
  'json.ignore-parse-errors' = 'false'
);




CREATE TABLE SG_LOCATIONS_DB (
  ID INT,
  ADDRESS STRING,
  BLK_NO STRING,
  BUILDING STRING,
  POSTAL_CODE STRING,
  LATITUDE DECIMAL(9,6),
  LONGITUDE DECIMAL(9,6),
  ROAD_NAME STRING,
  SEARCHVAL STRING,
  PRIMARY KEY (ID) NOT ENFORCED
) WITH (
   'connector' = 'jdbc',
   'url' = 'jdbc:mysql://mysql:3306/ride',
   'table-name' = 'location',
   'username' = 'root',
   'password' = 'root'
);


PUT taxi_ride_geo
{
  "mappings": {
    "properties" : {
      "address": {"type": "text"},
      "location": {"type": "geo_point"},
      "pickupDateTime" : {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"}
    }
  }
}

CREATE TABLE TAXI_RIDE_GEO (
     address STRING,
     location DOUBLE ARRAY,
     pickupDateTime STRING
	 
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://elasticsearch:9200',  -- elasticsearch address
    'index' = 'taxi_ride_geo'  -- elasticsearch index name, similar to database table name
);


INSERT INTO TAXI_RIDE_GEO
SELECT SLD.ADDRESS as address, ARRAY[SLD.LONGITUDE, SLD.LATITUDE] as location, DATE_FORMAT(FROM_UNIXTIME(TB.pickupDateTime / 1000), 'yyyy-MM-dd HH:mm:ss') as pickupDateTime from TAXI_BOOKINGS TB INNER JOIN SG_LOCATIONS_DB SLD ON TB.dropOffLocation = SLD.ADDRESS;






PUT ride_count_by_location_per_ten_second
{
  "mappings": {
    "properties" : {
      "drop_off_location": {"type": "text",
          "fields" : {
            "keyword" : {
              "type" : "keyword",
              "ignore_above" : 256
            }
          }},
      "window_start": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"},
      "window_end": {"type": "date", "format": "yyyy-MM-dd HH:mm:ss"},
      "per_ten_second_count" : {"type": "long"}
    }
  }
}





CREATE TABLE ride_count_by_location_per_ten_second (
    drop_off_location STRING,
    window_start TIMESTAMP,
    window_end TIMESTAMP,
    per_ten_second_count BIGINT
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://elasticsearch:9200',  -- elasticsearch address
    'index' = 'ride_count_by_location_per_ten_second'  -- elasticsearch index name, similar to database table name
);



INSERT INTO ride_count_by_location_per_ten_second
SELECT dropOffLocation, window_start, window_end, count(*) as count_per_window
  FROM TABLE(
      TUMBLE(TABLE TAXI_BOOKINGS, DESCRIPTOR(ts), INTERVAL '10' SECOND))
  GROUP BY dropOffLocation, window_start, window_end;

SELECT window_start, window_end, dropOffLocation, count(*) as count
  FROM TABLE(
    TUMBLE(TABLE TAXI_BOOKINGS, DESCRIPTOR(ts), INTERVAL '10' SECONDS))
  GROUP BY window_start, window_end, GROUPING SETS ((dropOffLocation), ());
  
  
  SELECT dropOffLocation, window_start, window_end, count(*)
  FROM TAXI_BOOKINGS
 GROUP BY dropOffLocation, window_start, window_end, TUMBLE(ts, INTERVAL '2' SECOND)
 
 
 
 SELECT dropOffLocation, window_start, window_end, count(*) as count_per_window
  FROM TABLE(
      TUMBLE(TABLE TAXI_BOOKINGS, DESCRIPTOR(ts), INTERVAL '1' MINUTES))
  GROUP BY dropOffLocation, window_start, window_end;






CREATE TABLE
    SG_LOCATION (
      ADDRESS STRING,
      BLK_NO STRING,
      BUILDING STRING,
	  POSTAL STRING,
	  LATITUDE DOUBLE,
	  LONGITUDE DOUBLE,
	  ROAD_NAME STRING,
	  SEARCHVAL STRING
     
    ) WITH (
    'connector' = 'filesystem',
	'path' = 'file:/Users/zabeer/flink-files/locations_formatted.json',
	'format'='json',
	'json.fail-on-missing-field' = 'false',
	'json.map-null-key-mode' = 'DROP'
 );


CREATE TABLE
    SG_LOCATION_FORMATTED (
      ADDRESS STRING,
      BLK_NO STRING,
      BUILDING STRING,
	  POSTAL STRING,
	  LATITUDE DOUBLE,
	  LONGITUDE DOUBLE,
	  ROAD_NAME STRING,
	  SEARCHVAL STRING
     
    ) WITH (
    'connector' = 'filesystem',
	'path' = 'file:/Users/zabeer/flink-files/locations_formatted.json',
	'format'='json',
	'json.fail-on-missing-field' = 'false',
	'json.map-null-key-mode' = 'DROP'
 );




CREATE TABLE SQL_STATEMENTS (
SQL_STRING STRING
) WITH ('connector' = 'filesystem',
	'path' = 'file:/Users/zabeer/flink-files/locations_sql.txt',
        'format' = 'raw'
	
 );


INSERT INTO SQL_STATEMENTS SELECT CONCAT('INSERT INTO location(ADDRESS, BLK_NO, BUILDING, POSTAL_CODE, LATITUDE, LONGITUDE, ROAD_NAME, SEARCHVAL) values (', '''', ADDRESS, '''', ',', '''' , BLK_NO, '''',  ',', '''', BUILDING, '''' , ',', '''',  POSTAL, '''', ',' , CAST(LATITUDE AS STRING) , ',' , CAST(LONGITUDE AS STRING), ',' , '''',  ROAD_NAME, '''' , ',', '''',  SEARCHVAL, '''', ');') AS SQL_STRING FROM SG_LOCATION;  

INSERT INTO SQL_STATEMENTS SELECT CONCAT('INSERT INTO location(ADDRESS, BLK_NO, BUILDING, POSTAL_CODE, LATITUDE, LONGITUDE, ROAD_NAME, SEARCHVAL) values (', '''', ADDRESS, '''', ',', '''' , BLK_NO, '''',  ',', '''', BUILDING, '''' , ',', '''',  POSTAL, '''', ',' , CAST(LATITUDE AS STRING) , ',' , CAST(LONGITUDE AS STRING), ',' , '''',  ROAD_NAME, '''' , ',', '''',  SEARCHVAL, '''', ');') AS SQL_STRING FROM SG_LOCATION_FORMATTED;  



CREATE TABLE SG_LOCATIONS_DB (
  ID INT,
  ADDRESS STRING,
  BLK_NO STRING,
  BUILDING STRING,
  POSTAL_CODE STRING,
  LATITUDE DECIMAL(9,6),
  LONGITUDE DECIMAL(9,6),
  ROAD_NAME STRING,
  SEARCHVAL STRING,
  PRIMARY KEY (ID) NOT ENFORCED
) WITH (
   'connector' = 'jdbc',
   'url' = 'jdbc:mysql://localhost:3306/ride',
   'table-name' = 'location',
   'username' = 'root',
   'password' = 'root'
);




CREATE TABLE LOCATIONS (
     ADDRESS STRING,
      BLK_NO STRING,
	  
      BUILDING STRING,
	  POSTAL STRING,
	  LATITUDE DOUBLE,
	  LONGITUDE DOUBLE,
	  ROAD_NAME STRING,
	  SEARCHVAL STRING
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'sg_locations'  -- elasticsearch index name, similar to database table name
);




CREATE TABLE LOCATIONS_GEO (
     ADDRESS STRING,
      LOCATION STRING
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'geo_test'  -- elasticsearch index name, similar to database table name
);

INSERT INTO LOCATIONS_GEO
SELECT ADDRESS,  CONCAT('{"lon":"', CAST(LONGITUDE AS STRING), '","lat":"', CAST(LATITUDE AS STRING), '"}')  AS location
FROM SG_LOCATION;

CREATE TABLE LOCATIONS_GEO (
     ADDRESS STRING,
      BLK_NO STRING,
	  
      BUILDING STRING,
	  POSTAL STRING,
	  GEO_LOCATION GEOMETRY,
	  ROAD_NAME STRING,
	  SEARCHVAL STRING
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'sg_geo_locations'  -- elasticsearch index name, similar to database table name
);



INSERT INTO LOCATIONS
SELECT ADDRESS, BLK_NO, BUILDING, POSTAL, LATITUDE, LONGITUDE, ROAD_NAME, SEARCHVAL
FROM SG_LOCATION;

select CONCAT('{"LON":"', CAST(LONGITUDE AS STRING), '","LAT":"', CAST(LATITUDE AS STRING), '"}')  AS `JSON` from SG_LOCATION;

INSERT INTO LOCATIONS_GEO
SELECT ADDRESS, BLK_NO, BUILDING, POSTAL, CONCAT('{"LON":"', CAST(LONGITUDE AS STRING), '","LAT":"', CAST(LATITUDE AS STRING), '"}')  AS `GEO_LOCATION`
, ROAD_NAME, SEARCHVAL
FROM SG_LOCATION;

PUT /geo_test
{
  "settings": {
    "number_of_shards": 1
  },
  "mappings": {
    "properties": {
      "address": {"type" : "text"},
      "geo_location": { "type": "geo_point" }
    }
  }
}


CREATE TABLE GEO_TEST (
     address STRING,
      location STRING
	 
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'geo_test'  -- elasticsearch index name, similar to database table name
);


CREATE TABLE GEO_TEST_2 (
     address STRING,
      location DOUBLE ARRAY
	 
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'geo_test_2'  -- elasticsearch index name, similar to database table name
);

INSERT INTO GEO_TEST
SELECT ADDRESS,  CONCAT('{"lon":"', CAST(LONGITUDE AS STRING), '","lat":"', CAST(LATITUDE AS STRING), '"}')  AS location
FROM SG_LOCATION;

INSERT INTO GEO_TEST
SELECT ADDRESS,  CONCAT('{"lon":"', CAST(LONGITUDE AS STRING), '","lat":"', CAST(LATITUDE AS STRING), '"}')  AS location
FROM SG_LOCATION WHERE ADDRESS LIKE '%CHANGI%';


INSERT INTO GEO_TEST_2
SELECT ADDRESS,  ARRAY[LONGITUDE, LATITUDE]  AS location
FROM SG_LOCATION WHERE ADDRESS LIKE '%CHANGI%';


CREATE TABLE GEO_TEST_1 (
     address STRING,
      location ROW<lat FLOAT, lon FLOAT>
	 
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'geo_test_1'  -- elasticsearch index name, similar to database table name
);

INSERT INTO GEO_TEST_1
SELECT ADDRESS,  CAST(ROW(LATITUDE, LONGITUDE) AS ROW<lat FLOAT, lon FLOAT>)  AS location
FROM SG_LOCATION WHERE ADDRESS LIKE '%CHANGI%';


CREATE TABLE GEO_TEST_3 (
     address STRING,
      location STRING
	 
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'geo_test_3'  -- elasticsearch index name, similar to database table name
);

INSERT INTO GEO_TEST_3
SELECT ADDRESS,  CONCAT('{"lat":', CAST(LATITUDE AS STRING),',"lon":', CAST(LONGITUDE AS STRING), '}')  AS location
FROM SG_LOCATION WHERE ADDRESS LIKE '%CHANGI%';


CREATE TABLE GEO_TEST_21 (
     address STRING,
     location DOUBLE ARRAY
	 
) WITH (
    'connector' = 'elasticsearch-7', -- using elasticsearch connector
    'hosts' = 'http://localhost:9200',  -- elasticsearch address
    'index' = 'geo_test_21'  -- elasticsearch index name, similar to database table name
);


INSERT INTO GEO_TEST_21
SELECT ADDRESS,  ARRAY[LONGITUDE, LATITUDE]  AS location
FROM SG_LOCATION WHERE ADDRESS LIKE '%CHANGI%';

 


INSERT INTO GEO_TEST_21
SELECT SLD.ADDRESS as address, ARRAY[SLD.LONGITUDE, SLD.LATITUDE] as location from TAXI_BOOKINGS TB INNER JOIN SG_LOCATIONS_DB SLD ON TB.dropOffLocation = SLD.ADDRESS;

SELECT ADDRESS,  ARRAY[LONGITUDE, LATITUDE]  AS location
FROM SG_LOCATION WHERE ADDRESS LIKE '%CHANGI%';


PUT /my-index/_mapping
{
  "properties": {
    "coordinates": {
      "type": "geo_point"
    }
  }
}





POST my-index/_update_by_query
{
  "script": {
    "inline": "ctx._source.coordinates = [ctx._source.lon, ctx._source.lat]",
    "lang": "painless"
  },
  "query": {
    "match_all": {}
  }
}


GET /geo_test_4

PUT /geo_test
{
 "mappings": {
   "properties" : {
      "address": {"type": "text"},
      "location": {"type": "geo_point"}
    }
 } 
}

DELETE /geo_test

PUT /geo_test_4/_mapping
{
  "properties": {
    "location": {
      "type": "geo_point"
    }
  }
}

POST /geo_test/_mapping
{
  "script": {
    "inline": "ctx._source.coordinates = [ctx._source.location.lon, ctx._source.location.lat]",
    "lang": "painless"
  },
  "query": {
    "match_all": {}
  }
}


PUT geo_test_20/_doc/1
{
  "text": "Geopoint as an object using GeoJSON format",
  "location": { 
    "type": "Point",
    "coordinates": [-71.34, 41.12]
  }
}

PUT geo_test_21/_doc/2
{
 "address" : "11A STRAITS BOULEVARD TEMPORARY SITE OFFICE SINGAPORE 018907",
 "location": { 
    "lat": 1.274949694,
    "lon": 103.8516652
  }
}

PUT geo_test_21
{
  "mappings": {
    "properties" : {
      "address": {"type": "text"},
      "location": {"type": "geo_point"}
    }
  }
}
